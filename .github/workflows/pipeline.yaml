# cicd pipeline that builds an image and pushes it to a registry and then deploys it to a k8s cluster using helm inside terraform

name: Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '00-images/**'
      - 'k8s/helm-chart/**'
  workflow_dispatch:

jobs:

    build:
        runs-on: ubuntu-latest

        steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to DockerHub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build and Push action
          uses: docker/build-push-action@v6
          with:
            context: ./api
            file: ./api/Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/cetha:${{github.run_id}}
  
    update:
        runs-on: ubuntu-latest
        needs: build

        steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
                token: ${{ secrets.TOKEN }}

        - name: Update Helm chart
          run: |
                sed -i 's/tag: .*/tag: "${{github.run_id}}"/' k8s/helm-chart/cetha-api/values.yaml

        - name: Commit and push changes
          run: |
                git config --global user.email "yuteenightxi@gmail.com"
                git config --global user.name "Utibe Okon"
                git add k8s/helm-chart/cetha-api/values.yaml
                git commit -m "Update tag in Helm chart"
                git push
  
    deploy:
        runs-on: ubuntu-latest
        needs: update
        env:
             ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
             ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
             ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
             ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up environment variables
          run: |
            echo "TF_VAR_client_id=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
            echo "TF_VAR_client_secret=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
            echo "TF_VAR_subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "TF_VAR_tenant_id=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV

        - name: Install Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Terraform Init
          working-directory: ./infrastructure
          run: | 
            terraform init
            echo $TF_VAR_subscription_id

        - name: Terraform Plan
          working-directory: ./infrastructure
          run: terraform plan

        - name: Terraform Apply
          working-directory: ./infrastructure
          run: terraform apply -auto-approve

    test:
        runs-on: ubuntu-latest
        needs: deploy

        steps:
          - name: Checkout repository
            uses: actions/checkout@v3
      
          - name: Set up kubectl
            uses: azure/setup-kubectl@v3
            with:
              version: 'latest'
      
          - name: Authenticate with Azure
            uses: azure/login@v1
            with:
              creds: ${{ secrets.AZURE_CREDENTIALS }}
      
          - name: Get Kubeconfig
            run: |
              az aks get-credentials --resource-group cetha-46-RG --name cetha-api-AKS --overwrite-existing
      
          - name: Check Pod Status
            run: |
              kubectl get pods --namespace <your-namespace> -o json | jq -r '.items[] | select(.status.phase != "Running") | "\(.metadata.name) is in \(.status.phase) phase"'
      
          - name: Fail if unhealthy pods exist
            run: |
              UNHEALTHY_PODS=$(kubectl get pods --namespace <your-namespace> -o json | jq -r '.items[] | select(.status.phase != "Running") | .metadata.name')
              if [ -n "$UNHEALTHY_PODS" ]; then
                echo "Unhealthy pods detected: $UNHEALTHY_PODS"
                exit 1
              fi
            continue-on-error: false

          - name: Check endpoint
            run: |
              kubectl port-forward service/cetha-api 8080:80 -n cetha > port-forward.log 2>&1 &
              sleep 5
              echo "" >> ./endpoint_check.txt && curl 127.0.0.1:8080 >> ./endpoint_check.txt
            continue-on-error: true